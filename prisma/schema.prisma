generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  queries       Query[]
  dataSource    DataSource[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Query {
  id         String   @id @default(cuid())
  content    String
  result     Json?
  createdAt  DateTime @default(now())
  userId     String?  // Made optional
  user       User?    @relation(fields: [userId], references: [id]) // Made optional
  dataSourceId String?
  dataSource DataSource? @relation(fields: [dataSourceId], references: [id])
}

model DataSource {
  id         String   @id @default(cuid())
  name       String
  type       String   // postgresql, mysql, mongodb, csv, api
  config     Json     // connection details
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String?  // Made optional
  user       User?    @relation(fields: [userId], references: [id]) // Made optional
  queries    Query[]
}
